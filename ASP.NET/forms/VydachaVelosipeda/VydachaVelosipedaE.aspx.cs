/*flexberryautogenerated="false"*/

namespace IIS.Прокат_велосипедов_2
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using ICSSoft.STORMNET.Business;
    using System.Web.Services;
    using System;

    public partial class ВыдачаВелосипедаE : BaseEditForm<ВыдачаВелосипеда>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ВыдачаВелосипедаE()
            : base(ВыдачаВелосипеда.Views.ВыдачаВелосипедаE)
        {
            
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/VydachaVelosipeda/VydachaVelosipedaE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            bool hasRights = RightManager.AccessCheck("Выдать велосипед");
            if (!hasRights)
            {
                throw new Exception("У вас нет прав для выполнения этой операции");
            }
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            
            Page.Validate();
            ctrlДатаНачала.ReadOnly = true;
            
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
            //ctrlКлиент.LookUpFormURL = ResolveUrl("/forms/Klient/KlientL.aspx");
            //ctrlКлиент.LookUpFormMenubar = BaseMasterEditorLookUp.YesNo.Yes;
            //ctrlКлиент.LookUpFormToolbar = BaseMasterEditorLookUp.YesNo.Yes;

        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            
            

            return DataObject;
        }
        [WebMethod]
        public static string MySaveObject
            (string startDate ,string plannedDuration, string plannedPrice,
             string startPoint, string vel, string klient, string employee)
        {
            try
            {
                var ds = DataServiceProvider.DataService;

                var velObj = new Велосипед { __PrimaryKey = (vel).ToString() };
                ds.LoadObject(velObj);

                var startPointObj = new ТочкаПроката { __PrimaryKey = (startPoint).ToString() };
                ds.LoadObject(startPointObj);

                var employeeObj = new Сотрудник { __PrimaryKey = (employee).ToString() };
                ds.LoadObject(employeeObj);

                var clientObj = new Клиент { __PrimaryKey = (klient).ToString() };
                ds.LoadObject(clientObj);

                var storedObject = new IIS.Прокат_велосипедов_2.ПрокатВелосипеда
                {
                    ДатаНачала = DateTime.Parse(startDate),
                    Велосипед = velObj,
                    ПлановаяСтоимость = Int32.Parse(plannedPrice),
                    ПлановаяДлительность = Int32.Parse(plannedDuration),
                    ТочкаВыдачи = startPointObj,
                    ТочкаСдачи = null,
                    Прокатчик = employeeObj,
                    Клиент = clientObj,
                    ФактическаяДатаСдачи = null,
                    ФактическаяСтоимость = 0
                };

                
                ds.UpdateObject(storedObject);

                string uLogin = ICSSoft.Services.CurrentUserService.CurrentUser.Login;
                LogService.LogInfo($"Пользователь {uLogin} совершил выдачу велосипеда {velObj.Номер} ");

                return "1";
            }
            catch (System.Exception e )
            {
                return "0";
            }

        }
        
        
    }
}